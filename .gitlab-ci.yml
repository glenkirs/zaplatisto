stages:
  - build
  - deploy

variables:
  DOCKER_COMPOSE: docker/docker-compose.yml
  DOCKER_IMAGE_NAME: backend_${CI_COMMIT_REF_SLUG}
  DOCKER_FILE: docker/Dockerfile

before_script:
  - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" $CI_REGISTRY --password-stdin

build_dev:
  stage: build
  tags:
    - shell
  script:
    - echo "ENV NODE_ENV=prod" >> ${DOCKER_FILE}
    - echo "ENV SERVICE_HOST=localhost" >> ${DOCKER_FILE}
    - echo "ENV JWT_SECRET=$JWT_SECRET" >> ${DOCKER_FILE}
    - echo "ENV EXPIRES_IN=$EXPIRES_IN" >> ${DOCKER_FILE}
    - echo "ENV SERVICE_PORT=$SERVICE_PORT" >> ${DOCKER_FILE}
    - echo "ENV SEQUELIZE_USER=$SEQUELIZE_USER" >> ${DOCKER_FILE}
    - echo "ENV SEQUELIZE_PASS=$SEQUELIZE_PASS" >> ${DOCKER_FILE}
    - echo "ENV SEQUELIZE_DB=$SEQUELIZE_DB" >> ${DOCKER_FILE}
    - echo "ENV SEQUELIZE_HOST=$SEQUELIZE_HOST" >> ${DOCKER_FILE}
    - echo "ENV SEQUELIZE_PORT=$SEQUELIZE_PORT" >> ${DOCKER_FILE}
    - sed -i "s/https:\/\/gitlab.zaplatisto.ru/https:\/\/gitlab-ci-token:$CI_JOB_TOKEN@gitlab.zaplatisto.ru/g" package.json
    - docker-compose -p ${DOCKER_IMAGE_NAME} -f ${DOCKER_COMPOSE} build --pull --no-cache
    - docker-compose -p ${DOCKER_IMAGE_NAME} -f ${DOCKER_COMPOSE} push
  only:
    - dev

deploy_dev:
  stage: deploy
  tags:
    - shell
  script:
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    - docker-compose -H "ssh://$DEV_USER@$DEV_HOST" -f ${DOCKER_COMPOSE} down --remove-orphans
    - docker-compose -H "ssh://$DEV_USER@$DEV_HOST" -f ${DOCKER_COMPOSE} pull --ignore-pull-failures
    - docker-compose -H "ssh://$DEV_USER@$DEV_HOST" -f ${DOCKER_COMPOSE} up -d
  only:
    - dev

deploy_prod:
  stage: deploy
  tags:
    - shell
  script:
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    - ssh $DEV_USER@$DEV_HOST docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - ssh $DEV_USER@$DEV_HOST docker pull $CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:$CI_PIPELINE_ID
    - ssh $DEV_USER@$DEV_HOST docker container rm -f prod_front || true
    - ssh $DEV_USER@$DEV_HOST docker run -d -p $SERVICE_PORT:$SERVICE_PORT/tcp --name prod_front $CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:$CI_PIPELINE_ID
  only:
    - prod
